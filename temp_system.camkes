/*------------------------------------------------------------------------------
* temp_system.camkes
*
*-----------------------------------------------------------------------------*/

import <std_connector.camkes>;

import "components/AlarmProcess/AlarmProcess.camkes";
import "components/TempControlProcess/TempControlProcess.camkes";
import "components/FanProcess/FanProcess.camkes";
import "components/TempSensorProcess/TempSensorProcess.camkes";
import "components/WebInterface/WebInterface.camkes";
import "components/SoC/SoC.camkes";


assembly {
  composition {
    /* Application Components */
    component AlarmProcess alarmProc;
    component TempControlProcess tempProc;
    component FanProcess fanProc;
    component TempSensorProcess tempSensProc;
    component WebInterface webInterface;

    /* Driver Components */
    component SoC soc;
    component HWGpio gpioBank0;
    component HWGpio gpioBank1;
    component HWGpio gpioBank2;
    component HWGpio gpioBank3;
    component HWTimer timer2;
    component HWTimer timer3;
    //component HWMux hwmux;
    //component HWUart hwuart;

    /* Application Policy */
    connection seL4RPCCall t_t(from tempSensProc.current_temp, to tempProc.current_temp);
    connection seL4RPCCall t_a(from tempProc.alarm, to alarmProc.alarm);
    connection seL4RPCCall t_f(from tempProc.fan, to fanProc.fan);
    connection seL4RPCCall t_w(from webInterface.status, to tempProc.status);
    connection seL4RPCCall w_t(from webInterface.desired_temp, to tempProc.desired_temp);


    /* Driver Policy */
    connection seL4RPCCall t2(from tempSensProc.timer, to soc.timer2);
    connection seL4RPCCall t3(from webInterface.timer, to soc.timer3);
    connection seL4RPCCall f_g(from fanProc.gpio, to soc.gpio);
    connection seL4RPCCall a_g(from alarmProc.gpio, to soc.gpio);
    connection seL4RPCCall s_i(from tempSensProc.i2c, to soc.i2c_bit_bang);

    /* Driver Memory Mapping */
    connection seL4HardwareMMIO gpio_bank0_mem(from soc.gpio0, to gpioBank0.reg);
    connection seL4HardwareMMIO gpio_bank1_mem(from soc.gpio1, to gpioBank1.reg);
    connection seL4HardwareMMIO gpio_bank2_mem(from soc.gpio2, to gpioBank2.reg);
    connection seL4HardwareMMIO gpio_bank3_mem(from soc.gpio3, to gpioBank3.reg);
    connection seL4HardwareMMIO timer2_mem(from soc.timer2reg, to timer2.reg);
    connection seL4HardwareMMIO timer3_mem(from soc.timer3reg, to timer3.reg);
    //connection seL4HardwareMMIO mux_registers_mem(from soc.mux0, to hwmux.reg);
    //connection seL4HardwareMMIO uart0_mem(from soc.uart0, to uartbase.reg0);
    //connection seL4HardwareMMIO uart1_mem(from soc.uart1, to uartbase.reg1);
    //connection seL4HardwareMMIO uart2_mem(from soc.uart2, to uartbase.reg2);

    /* Driver Interrupt Mapping */
    connection seL4HardwareInterrupt timer2_irq(from timer2.irq, to soc.timer2irq);
    connection seL4HardwareInterrupt timer3_irq(from timer3.irq, to soc.timer3irq);

  }
  configuration {
      /* Find out the device memory address and IRQ number from the hardware data sheet.
      * See https://github.com/seL4/camkes-tool/blob/2.1.0/docs/index.md#hardware-components */

      /* Configure Physical Addresses and IRQ Numbers for BB */
      timer2.reg_attributes = "0x48040000:0x1000";
      timer2.irq_attributes = 68;
      timer3.reg_attributes = "0x48042000:0x1000";
      timer3.irq_attributes = 69;

      gpioBank0.reg_attributes = "0x44e07000:0x1000";
      gpioBank1.reg_attributes = "0x4804c000:0x1000";
      gpioBank2.reg_attributes = "0x481ac000:0x1000";
      gpioBank3.reg_attributes = "0x481ae000:0x1000";
      //hwmux.reg_attributes = "0x44E10000:0x1000";
      //hwuart.reg0_attributes = "0x44E09000:0x1000";
      //hwuart.reg1_attributes = "0x48022000:0x1000";
      //hwuart.reg2_attributes = "0x48024000:0x1000";

      /* assign an initial value to semaphore */
      soc.timer2sem_value = 0;
      soc.timer3sem_value = 0;
  }
}
